#' Generate full commands
#'
#' This function generates a single-line tool command with the supplied parameters for each file in the supplied directory as well as appending other commands, such as gzipping and moving results files.
#' @param input.dir character; path to directory containing input files. Default is NULL.
#' @param paired logical; are their paired R1 and R2 files that should be analyzed concurrently? Default is TRUE.
#' @param tmp.dir character; path to temporary directory for direct output. After files are written here, they will be moved to `output.dir`. Default is NULL.
#' @param output.dir character; path to storage directory for output. If no `tmp.dir` output will be written here, otherwise it will be written to `tmp.dir` first and then moved here. Default is '.'.
#' @param zip.output logical; whether to gzip final output (occurs before moving files if `tmp.dir` is set). Default is TRUE.
#' @param split character; character(s) to split the sample name from the read ID in link name, e.g. sample01-R1.fastq.gz OR sample01--R1.fastq.gz. Default is '--'".
#' @param sample.field integer; field (after cutting) in which to find sample names. Default is 1.
#' @param write.to character; file name to write commands to, if NULL, only returns commands as character vector. Default is NULL
#' @param ... other commands to pass to appropriate tool. Names must match short or long version found in that tool's help page.
#' @seealso \code{\link{system}}, \code{\link{list2}}, \code{\link{generate.tool.command}}
#' @export

generate.full.commands <- function(
    input.dir = NULL,
    paired = TRUE,
    tmp.dir = NULL,
    output.dir = ".",
    zip.output = TRUE,
    split = "--",
    sample.field = 1,
    write.to = NULL,
    ...
) {
  require(magrittr)
  require(stringr)
  direct.out <- ifelse(is.null(tmp.dir), output.dir, tmp.dir)

  read1.files <- list.files(path = input.dir, pattern = "R1", full.names = T)
  commands <- sapply(read1.files, function(inputR1) {
    name <- basename(inputR1) %>%
      str_split(split) %>%
      sapply(`[`, sample.field)
    if (paired) {
      inputR2 <- list.files(input.dir, pattern = paste0(".*", name, ".*R2"), full.names = T)
      if (length(inputR2) == 0) {
        rlang::abort(
          paste(
            "Argument `paired' set to TRUE, but no R2 file that matches",
            inputR1, "can be found in the input directory."
          )
        )
      }
      cmd <- generate.tool.commmand(
        input = inputR1,
        input = inputR2,
        output = direct.out,
        ...
      )
    } else {
      cmd <- generate.tool.commmand(
        input = inputR1,
        output = direct.out,
        ...
      )
    }
    if (zip.output) {
      cmd <- paste(
        cmd,
        paste0(
          "Rscript -e \"metaGTx.processing::tar.directory(location='", direct.out,
          "', match.pattern='", name, "')\" ;"
        ),
        paste0(
          "Rscript -e \"metaGTx.processing::gzip.files(location='", direct.out,
          "', match.pattern='", name, "')\" ;"
        )
      )
    }
    if (!is.null(tmp.dir)) {
      cmd <- paste(
        cmd,
        paste0(
          "Rscript -e \"metaGTx.processing::move.files(move.from='", tmp.dir,
          "', move.to='", output.dir,
          "', match.pattern='", name, "')\" ;"
        )
      )
    }
  })
  if (!is.null(write.to)) {
    writeLines(text = commands, con = write.to)
    rlang::inform(paste("Commands written to", write.to))
  }
  return(commands)
}

